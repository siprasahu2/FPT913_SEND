#Fri Feb 24 23:43:43 IST 2023
[condition][]it is not true that_the {pos} position_of {field1} is equal to {pos} position_of {field2}=(!((new Position()).positionOfOneFieldIsEqualToPositionOfAnother({pos},(xcb.xpath({field1})).stringValue(),{pos},(xcb.xpath({field2})).stringValue())))
[condition][]the difference between {fielddate1} and {fielddate2} is greater than or equal to one year=((new DateCheck()).isRangeGreaterThanOrEqualToOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]it is not true that_the {fieldwithxpath} is prohibited=(!((new Prohibited()).isProhibited((xcb.xpath({fieldwithxpath})).stringValue())))
[condition][]the {fielddate1} is holiday=((new DateCheck()).isHoliday((xcb.xpath({fielddate1})).stringValue()))
[condition][]it is not true that_isCurrentDateLessThanOrNotEqualToDesiredDueDate {var0} =(!((new DateCheck()).isCurrentDateLessThanOrNotEqualToDesiredDueDate({var0})))
[condition][]it is not true that_the {field} has_all lowercase characters for comma seperated values=(!((new CapitalLetterCheck()).isAllLowerCaseForCSV((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the interval between {fielddate1} and {fielddate2} is greater than or equal to {days}=(!((new DateCheck()).intervalBetweenTwoDateIsGreaterThanOrEqualToDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days})))
[condition][]it is not true that_the {field} is_equal_to_values {CommaSeparatedValues}=(!((new Equals()).isEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]the {field} contains {num} of spaces before Alpha Characters=((new CapitalLetterCheck()).containsConsecutiveSpacesBeforeAlphaCharacters((xcb.xpath({field})).stringValue(),{num}))
[condition][]the maximum length of {field} is {value}=((new LengthCheck()).checkMaximumlength((xcb.xpath({field})).stringValue(),{value}))
[condition][]isSpecifiedSegmentInValidFormat {var0} {var1} {var2} =((new DateFormatCheck()).isSpecifiedSegmentInValidFormat({var0},{var1},{var2}))
[condition][]RuleId {ruleID} it is not true that_occnooffieldpopulated {var0} {var1} =(!(occnooffieldpopulated({var0},{var1})))
[condition][]the {field} doesnot contain single or combination of the values {CommaSeparatedValues}=((new Contains()).fielddoesntcontaincombination((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the {field} has_telephone number format as {tnformat}=((new TNFormat()).tnFormatIs((xcb.xpath({field})).stringValue(),{tnformat}))
[condition][]RuleId {ruleID} anyCharacterOfFieldIs {var0} {var1} =(anyCharacterOfFieldIs({var0},{var1}))
[condition][]for an order {ccna}  {reqtyp} and {act} matches with the database values=((new SupplementOrderCheck(xcb.getXmlInstance())).ccnaValueCheck({ccna},{reqtyp},{act}))
[condition][]RuleId {ruleID} it is not true that_more than one occurence of the {pathfield} is_equal_to_values {values}=(!(morethanoneOccurenceEqualToValues((xcb.xpath({pathfield})).stringValue(),{values})))
[condition][]the range of the {field} is between {startrange} and {endrange}=((new RangeOfValues()).rangeCheckNN_NN((xcb.xpath({field})).stringValue(),{startrange},{endrange}))
[condition][]the {fieldvalue} contains virgule which is preceeded or followed by numeric=((new Contains()).virguleprecededorfollowedbynumeric((xcb.xpath({fieldvalue})).stringValue()))
[condition][]it is not true that_the {Date1} less than first eight chars of {Date2} in the {CCYYMMDD} format=(!((new DateFormatCheck()).isFieldDateLessThanComparisonDateInspecifiedFormat({Date1},{Date2},{CCYYMMDD})))
[condition][]it is not true that_lastCharacterOfField {var0} {var1} =(!((new Equals()).lastCharacterOfField({var0},{var1})))
[condition][]the difference between {fielddate1} and {fielddate2} is greater than one year=((new DateCheck()).isRangeGreaterThanOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]the {field} has_both uppercase and lowercase characters=((new CapitalLetterCheck()).isUpperAndLowerCase((xcb.xpath({field})).stringValue()))
[condition][]setActivity {var0} =((new ReqTypeAct()).setActivity({var0}))
[condition][]RuleId {ruleID} it is not true that_any occurence of {fieldwithxpath} not_equal_to_values {values} or not populated=(!(anyOccurenceNotEqualToValuesornotpopulated((xcb.xpath({fieldwithxpath})).stringValue(),{values})))
[condition][]the {pos} and {pos} position_of the {field} is not equal to {pos} and {pos} position=((new Position()).twoPositionValueofTagNotEqualToValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]checkForOrderCompletion {PON} {VER} and {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkordercompletion((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]RuleId {ruleID} anyCharacterExcept {var0} {var1} {var2} {var3} {var4} =(anyCharacterExcept({var0},{var1},{var2},{var3},{var4}))
[condition][]vcomparePreviousAndCurrentxmlField {pon} {ver} {ccna} {xmlinstance} {errorcode} =((new SupplementOrderCheck(xcb.getXmlInstance())).vcomparePreviousAndCurrentxmlField({pon},{ver},{ccna},{xmlinstance},{errorcode}))
[condition][]the {fielddate1} is a valid date=((new DateCheck()).isValidDate((xcb.xpath({fielddate1})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_noOccurenceEqualToValue {var0} {var1} =(!(NoOccurenceEqualToValue({var0},{var1})))
[condition][]the {field} does not contain {CommaSeparatedValues}=((new Contains()).doesNotContains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]it is not true that_the interval between {fielddate1} and {fielddate2} is greater than {days}=(!((new DateCheck()).intervalBetweenTwoDateIsGreaterThanDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days})))
[condition][]the {field} is AlphaNumeric with Special Characters=((new DatatypeCheck()).checkAlphaNumericSP((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} is Numeric=(!((new DatatypeCheck()).checkNumeric((xcb.xpath({field})).stringValue())))
[condition][]the {field} is_equal_to_values {CommaSeparatedValues}=((new Equals()).isEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the {field} is_not_populated=((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_all occurance of the {field} is Sequential=(!(allOccurenceValuesSequential((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} has_all uppercase characters for comma seperated values=(!((new CapitalLetterCheck()).isAllUpperCaseForCSV((xcb.xpath({field})).stringValue())))
[condition][]RuleId {ruleID} it is not true that_the {field} contains alphanumeric without {spset}=(!(checkAlphaNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{spset})))
[condition][]it is not true that_the range of the {field} is AA to ZZ=(!((new RangeOfValues()).rangeCheckAA_ZZ((xcb.xpath({field})).stringValue())))
[condition][]the {Date1} less than first eight chars of {Date2} in the {CCYYMMDD} format=((new DateFormatCheck()).isFieldDateLessThanComparisonDateInspecifiedFormat({Date1},{Date2},{CCYYMMDD}))
[condition][]the {fielddate1} is less than {fielddate2}=((new DateCheck()).isLessThan((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]it is not true that_the {field} is Numeric without Special Characters Set {setofspecialcharacters}=(!((new DatatypeCheck()).checkNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters})))
[condition][]it is not true that_the {pos} and {pos} position_of the {field} is greater than {pos} and {pos} position=(!((new Position()).twoPositionValueofTagIsGreaterThanTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]it is not true that_the {field} is Numeric with Special Characters Set {setofspecialcharacters}=(!((new DatatypeCheck()).checkNumericSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters})))
[condition][]the {SATH} and {STATE} has_abbreviation value=((new ThoroughFareHelper()).fetchAbbreviationName({SATH},{STATE}))
[condition][]RuleId {ruleID} noOfOccurancesOfTagValueIsUniqueForAnotherTagValueSet {var0} {var1} {var2} =(noOfOccurancesOfTagValueIsUniqueForAnotherTagValueSet({var0},{var1},{var2}))
[condition][]the {pos} position_of_field {field} is_not_equal_to_values {commaseperatedvalues}=((new Position()).positionOftagValueNotEqualToValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]the position {pos1} and {pos2} of {field} is between {startrange} and {endrange}=((new RangeOfValues()).twoFieldPositionInRange({pos1},{pos2},(xcb.xpath({field})).stringValue(),{startrange},{endrange}))
[condition][]it is not true that_cancelOrdercheck {PON} {CCNA} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkForCancelorder((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_checkForOrderCompletion{PON} {VER} AND {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkordercompletion((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_the {field} has_both uppercase and lowercase characters for comma seperated vaules=(!((new CapitalLetterCheck()).isUpperAndLowerCaseForCSV((xcb.xpath({field})).stringValue())))
[condition][]the_field {field} contains embedded space=((new SpaceCheck()).containsEmbeddedSpace((xcb.xpath({field})).stringValue()))
[condition][]the interval between {fielddate1} and {fielddate2} is not equal to {days}=((new DateCheck()).intervalBetweenTwoDateIsNotEqualtoDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days}))
[condition][]it is not true that_checkRequestExistsInDatabaseForAct {PON} {CCNA} {ACT}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseForAct((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue(),(xcb.xpath({ACT})).stringValue()))
[condition][]the_field is {field} not populated=((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue()))
[condition][]the position_of Alpha is {pos} in {field}=((new DatatypeCheck()).checkPositionAlpha({pos},(xcb.xpath({field})).stringValue()))
[condition][]the {field} is AlphaNumeric without following Special Character set {setofspecialcharacters}=((new DatatypeCheck()).checkAlphaNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters}))
[condition][]RuleId {ruleID} noOfOccurancesOfLactIOPairMustHaveDiffAliValue {var0} {var1} =(noOfOccurancesOfLactIOPairMustHaveDiffAliValue({var0},{var1}))
[condition][]the {field} is Required for {commaseperatedvalues}=((new Required()).requiredForValues((xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]it is not true that_dateCheck1 {var0} {var1} =(!((new DateFormatCheck()).dateCheck1({var0},{var1})))
[condition][]check Request Exists In Database{PON} {VER} and {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabase((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_the occurance of the {field} is atleast {value}=(!(atleastOccurenceOf((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {pos} of {field} has {commaseperatedvalues}=((new isValidValue()).positionOfFieldValidValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]it is not true that_vcomparePreviousAndCurrentxmlField {pon} {ver} {ccna} {xmlinstance} {errorcode} =((new SupplementOrderCheck(xcb.getXmlInstance())).vcomparePreviousAndCurrentxmlField({pon},{ver},{ccna},{xmlinstance},{errorcode}))
[condition][]the {field} is Numeric with Special Characters Set {setofspecialcharacters}=((new DatatypeCheck()).checkNumericSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters}))
[condition][]the difference between {fielddate1} and {fielddate2} is less than or equal to one year=((new DateCheck()).isRangeLesserThanOrEqualToOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]the {field} not equal {value}=((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that_the {field} contains {num} of consecutive lowercase Alpha Characters=(!((new CapitalLetterCheck()).containsConsecutiveLowercaseAlphaCharacters((xcb.xpath({field})).stringValue(),{num})))
[condition][]there is no {section} section=((new Populated()).isNotPopulatedSection({section}))
[condition][]RuleId {ruleID} any_occurance_of_the {fieldwithxpath} in_section {section} exists=(moExists(xcb,{ruleID},{section},{fieldwithxpath}))
[condition][]it is not true that_the {fielddate1} is less than {fielddate2}=(!((new DateCheck()).isLessThan((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]it is not true that_the {field} has_a invalid value {value}=(!((new isValidValue()).isNotValidValue((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {fieldwithxpath} is required=((new Required()).isRequired((xcb.xpath({fieldwithxpath})).stringValue()))
[condition][]RuleId {ruleID} any_occurance_of_the {field} in_section {section} is_equal_to_value {value}=(multiEquals(xcb,{ruleID},{section},{field},{value}))
[condition][]it is not true that_isRangeGreaterThanSpecifiedMonths {var0} {var1} {var2} =(!((new DateCheck()).isRangeGreaterThanSpecifiedMonths({var0},{var1},{var2})))
[condition][]RuleId {ruleID} it is not true that_noOfOccurenceGreaterThan {var0} {var1} =(!(noOfOccurenceGreaterThan({var0},{var1})))
[condition][]RuleId {ruleID} it is not true that_noOfOccurancesOfLactIOPairMustHaveDiffAliValue {var0} {var1} =(!(noOfOccurancesOfLactIOPairMustHaveDiffAliValue({var0},{var1})))
[condition][]it is not true that_the {field} has_comma seperated values=(!((new CommaSeparatedSpace()).checkCommaSeparatedSpace((xcb.xpath({field})).stringValue())))
[condition][]the_field value {fieldvalue} do_not_matches the pattern {pattern}=((new SpecialFormat()).isPatternNotMatches((xcb.xpath({fieldvalue})).stringValue(),{pattern}))
[condition][]RuleId {ruleID} noOfOccurenceLessThan {var0} {var1} =(noOfOccurenceLessThan({var0},{var1}))
[condition][]it is not true that_the {fielddate1} is holiday=(!((new DateCheck()).isHoliday((xcb.xpath({fielddate1})).stringValue())))
[condition][]it is not true that_the {pos} position_of {field} equal_to_values {CommaSeparatedValues}=(!((new Contains()).positionOfFieldEqualToValues({pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]isCurrentDateLessThanOrNotEqualToDesiredDueDate {var0} =((new DateCheck()).isCurrentDateLessThanOrNotEqualToDesiredDueDate({var0}))
[condition][]the interval between {fielddate1} and {fielddate2} is greater than {days}=((new DateCheck()).intervalBetweenTwoDateIsGreaterThanDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days}))
[condition][]it is not true that_the {field} is AlphaNumeric without following Special Character set {setofspecialcharacters}=(!((new DatatypeCheck()).checkAlphaNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters})))
[condition][]it is not true that_the position {pos1} and {pos2} of {field} is between {startrange} and {endrange}=(!((new RangeOfValues()).twoFieldPositionInRange({pos1},{pos2},(xcb.xpath({field})).stringValue(),{startrange},{endrange})))
[condition][]the {fieldvalue} not_equals {value}=((new Equals()).isNotEquals((xcb.xpath({fieldvalue})).stringValue(),{value}))
[condition][]RuleId {ruleID} In any {section} the {field1} {field2}=(virtuallvlCheck({section},(xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue()))
[condition][]virtualgetPreviousResponseXMLFromDB {PON} {ver} {ccna} {xmlInstance} =(virtualgetPreviousResponseXMLFromDB((xcb.xpath({PON})).stringValue(),{ver},{ccna},{xmlInstance}))
[condition][]the {field} is equal or greater than {value}=((new Equals()).isEqualOrGreaterThan((xcb.xpath({field})).stringValue(),{value}))
[condition][]RuleId {ruleID} it is not true that_the value of any occurance of {field1withxpath} equals value of any occurence of {field2withxpath}=(!(valueofanyoccoffield1equalsvalueofanyoccoffield2((xcb.xpath({field1withxpath})).stringValue(),(xcb.xpath({field2withxpath})).stringValue())))
[condition][]RuleId {ruleID} In the form {form} with section {section} having {subsection} if the {rtyfield} equals {valueLML} then {lact} is not_equals D or I=(virtualnoofoccurencesofrtyequalslmllactnotdandI({form},{section},{subsection},(xcb.xpath({rtyfield})).stringValue(),{valueLML},{lact}))
[condition][]RuleId {ruleID} it is not true that_anyCharacterOfFieldIs {var0} {var1} =(!(anyCharacterOfFieldIs({var0},{var1})))
[condition][]RuleId {ruleID} positionOfAnyFieldEqualToCharacter {var0} {var1} {var2} =(positionOfAnyFieldEqualToCharacter({var0},{var1},{var2}))
[condition][]RuleId {ruleID} anyOccurencenoefieldPosEqualstoValue {var0} {var1} {var2} =(anyOccurencenoefieldPosEqualstoValue({var0},{var1},{var2}))
[condition][]the {field} is_not_equal_to_values {CommaSeparatedValues}=((new Equals()).isNotEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]cancelOrdercheck{PON} {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkForCancelorder((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_the {field} equals {value}=(!((new Equals()).isEquals((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {field} has_all Uppercase characters=((new CapitalLetterCheck()).isAllUpperCase((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the position_of Numeric is {pos} in {field}=(!((new DatatypeCheck()).checkPositionNumeric({pos},(xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {fielddate1} is not equal to {fielddate2}=(!((new DateCheck()).isNotEqualTo((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]the {field} is equal or less than {value}=((new Equals()).isEqualOrLessThan((xcb.xpath({field})).stringValue(),{value}))
[condition][]RuleId {ruleID} it is not true that_anyOccurencenoefieldPosEqualstoValue {var0} {var1} {var2} =(!(anyOccurencenoefieldPosEqualstoValue({var0},{var1},{var2})))
[condition][]the {pos} position_of {field} equal to {value} =((new Contains()).positionOfFieldEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that_the {field} not equal {value}=(!((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_the {field} contains roman numerals=(!((new Contains()).containsRoman((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_there is no {section} section=(!((new Populated()).isNotPopulatedSection({section})))
[condition][]the {pos} position_of {field} is in range {startvalue} and {endvalue}=((new Populated()).isPostionOfFieldPopulatedInRange({pos},(xcb.xpath({field})).stringValue(),{startvalue},{endvalue}))
[condition][]RuleId {ruleID} anyOccurenceOf {var0} =(anyOccurenceOf({var0}))
[condition][]RuleId {ruleID} all occurance of the {field} is not Sequential=(allOccurenceValuesnotSequential((xcb.xpath({field})).stringValue()))
[condition][]the {field} is populated=((new Populated()).isPopulated((xcb.xpath({field})).stringValue()))
[condition][] new ReqTypeAct  getActivity  =((new ReqTypeAct()).getActivity())
[condition][]RuleId {ruleID} the occurance of the {field} is atleast {value}=(atleastOccurenceOf((xcb.xpath({field})).stringValue(),{value}))
[condition][]RuleId {ruleID} validvalueisrepeated {var0} =(validvalueisrepeated({var0}))
[condition][]RuleId {ruleID} it is not true that_any_occurance_of_the {fieldwithxpath} in_section {section} exists=(!(moExists(xcb,{ruleID},{section},{fieldwithxpath})))
[condition][]RuleId {ruleID} noOfOccurencesOfBothTagAreEqualForSpecifiedPairValue {var0} {var1} {var2} {var3} =(noOfOccurencesOfBothTagAreEqualForSpecifiedPairValue({var0},{var1},{var2},{var3}))
[condition][]the_field {field} contains {CommaSeparatedValues}=((new Contains()).contains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]it is not true that_the difference between {fielddate1} and {fielddate2} is less than one year=(!((new DateCheck()).isRangeLesserThanOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]RuleId {ruleID} any section {fieldwithxpath} of {field} does not exists=(virtualAnyOccurencedoesnotExistsForSection((xcb.xpath({fieldwithxpath})).stringValue(),(xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {pos} position_of {field} is_not_equal_to_values {commaseperatedvalues}=(!((new Position()).positionOftagValueNotEqualToValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]the {field} contains numeric characters=((new Contains()).containsNumeric((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {pos} position_Of {field1} equal to {pos} position_Of {field2}=(!((new Contains()).positionOfFieldEqualToPositionOfField({pos},(xcb.xpath({field1})).stringValue(),{pos},(xcb.xpath({field2})).stringValue())))
[condition][]it is not true that_the {field} is less than time {value} in HHMMSS=(!((new TimeFormatCheck()).fieldinformatHHMMSSlessthanvalue((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_the {pos} and {pos} position_of the {field} is greater than or equal to {pos} and {pos} position=(!((new Position()).twoPositionValueofTagIsGreaterThanOrEqualToTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]it is not true that_the {field} contains numeric values followed by lowercase Alpha Characters=(!((new CapitalLetterCheck()).fieldContainsNumericValuesFollowedByLowercaseAlphaCharacters((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {pos} and {pos} position_of the {field} is lesser than or equal to {pos} and {pos} position=(!((new Position()).twoPositionValueofTagIsLessThanOrEqualToTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]the {field} has_only one {char} special character present=((new DatatypeCheck()).checkRepeationOFSpecialCharacter((xcb.xpath({field})).stringValue(),{char}))
[condition][]check Sup Request Exists In Database for {PON} {VER} and {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkSupRequestExistsInDatabase((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]the range of the {field} is A0 to Z9=((new RangeOfValues()).rangeCheckA0_Z9((xcb.xpath({field})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_noOfOccurencesOfBothTagAreEqualForSpecifiedPairValue {var0} {var1} {var2} {var3} =(!(noOfOccurencesOfBothTagAreEqualForSpecifiedPairValue({var0},{var1},{var2},{var3})))
[condition][]it is not true that_the_section {field} is_not_populated=(!((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} is_not_populated=(!((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {fielddate1} is less than or equal to {fielddate2}=(!((new DateCheck()).isLessThanOrEqualTo((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]the_length_of field {field} is between {min} and {max}=((new LengthCheck()).checkMinMaxLength((xcb.xpath({field})).stringValue(),{min},{max}))
[condition][]it is not true that_isSpecifiedSegmentInValidFormat {var0} {var1} {var2} =(!((new DateFormatCheck()).isSpecifiedSegmentInValidFormat({var0},{var1},{var2})))
[condition][]the {pos} position_of {field} is_not_equal_to_values {commaseperatedvalues}=((new Position()).positionOftagValueNotEqualToValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]the {field} has_format NNNNNNA=((new SpecialFormat()).formatisNNNNNNA((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} has_telephone number format as {tnformat}=(!((new TNFormat()).tnFormatIs((xcb.xpath({field})).stringValue(),{tnformat})))
[condition][]it is not true that_eachCharacterPreceededOrFollowedByNumeric {var0} {var1} =(!((new Contains()).eachCharacterPreceededOrFollowedByNumeric({var0},{var1})))
[condition][]the {field} is_not_equal_to_values {values}=((new Equals()).isNotEqualToValues((xcb.xpath({field})).stringValue(),{values}))
[condition][]the_field {field} is populated=((new Populated()).isPopulated((xcb.xpath({field})).stringValue()))
[condition][]isRangeGreaterThanSpecifiedMonths {var0} {var1} {var2} =((new DateCheck()).isRangeGreaterThanSpecifiedMonths({var0},{var1},{var2}))
[condition][]RuleId {ruleID} it is not true that_virtualnpqtyValueDoesNotMatchAllOccurencesOfportednbrValue {field} {xmlIns} =(!(virtualnpqtyValueDoesNotMatchAllOccurencesOfportednbrValue((xcb.xpath({field})).stringValue(),{xmlIns})))
[condition][]posoffieldequalsspace {var0} {var1} =((new SpaceCheck()).posoffieldequalsspace({var0},{var1}))
[condition][]it is not true that_checkForOrderCompletion {PON} {VER} and {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkordercompletion((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]RuleId {ruleID} any occurence of the position{pos1} to {pos2} of the_field {field} in subsection {section} of section {section}is_equal_to_value {value}=(virtual_anyOccurenceOfPos1To2IsEqualtoValue({pos1},{pos2},(xcb.xpath({field})).stringValue(),{section},{section},{value}))
[condition][]it is not true that_The {field} is less than time {value1} and greater than time {value2}=(!((new TimeFormatCheck()).timeRange((xcb.xpath({field})).stringValue(),{value1},{value2})))
[condition][]checkRequestExistsInDatabaseForREQTYP{PON} {CCNA} {REQTYP}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseForReqtyp((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue(),(xcb.xpath({REQTYP})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_noOfOccurenceLessThan {var0} {var1} =(!(noOfOccurenceLessThan({var0},{var1})))
[condition][]the {field} is Alpha with Special Characters=((new DatatypeCheck()).checkAlphaSP((xcb.xpath({field})).stringValue()))
[condition][]the {field} has_date format as {format}=((new DateFormatCheck()).dateCheck((xcb.xpath({field})).stringValue(),{format}))
[condition][]the {field} is Numeric=((new DatatypeCheck()).checkNumeric((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} is AlphaNumeric with following Special Character set {setofspecialcharacters}=(!((new DatatypeCheck()).checkAlphaNumericSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters})))
[condition][]RuleId {ruleID} it is not true that_noOfOccurancesOfTagValueIsUniqueForAnotherTagValueSet {var0} {var1} {var2} =(!(noOfOccurancesOfTagValueIsUniqueForAnotherTagValueSet({var0},{var1},{var2})))
[condition][]it is not true that_the {field} contains {num} of consecutive spaces after Alpha Characters=(!((new CapitalLetterCheck()).containsConsecutiveSpacesAfterAlphaCharacters((xcb.xpath({field})).stringValue(),{num})))
[condition][]RuleId {ruleID} atleastOccurenceOfTagPopulated {var0} {var1} =(atleastOccurenceOfTagPopulated({var0},{var1}))
[condition][]the {field} is AlphaNumeric=((new DatatypeCheck()).checkAlphaNumeric((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_isValidDate1 {var0} =(!((new DateCheck()).isValidDate1({var0})))
[condition][]eachCharacterPreceededOrFollowedByNumeric {var0} {var1} =((new Contains()).eachCharacterPreceededOrFollowedByNumeric({var0},{var1}))
[condition][]isCurrentDateLessThanOrEqualToDesiredDueDate {var0} =((new DateCheck()).isCurrentDateLessThanOrEqualToDesiredDueDate({var0}))
[condition][]it is not true that_checkRequestExistsInDatabaseforVZE {var0} {var1} {var2} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseforVZE({var0},{var1},{var2}))
[condition][]it is not true that_the {field} has_valid values {commaseperatedvalues}=(!((new isValidValue()).isValidValues((xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]it is not true that_the_field value {fieldvalue} do_not_matches the pattern {pattern}=(!((new SpecialFormat()).isPatternNotMatches((xcb.xpath({fieldvalue})).stringValue(),{pattern})))
[condition][]it is not true that_for an order {ccna}  {reqtyp} and {act} matches with the database values=((new SupplementOrderCheck(xcb.getXmlInstance())).ccnaValueCheck({ccna},{reqtyp},{act}))
[condition][]the {fielddate1} is a working day=((new DateCheck()).isWorkingDay((xcb.xpath({fielddate1})).stringValue()))
[condition][]checkRequestExistsInDatabaseForAct{PON} {CCNA} {ACT}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseForAct((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue(),(xcb.xpath({ACT})).stringValue()))
[condition][]RuleId {ruleID} all occurance of the {field} is Sequential=(allOccurenceValuesSequential((xcb.xpath({field})).stringValue()))
[condition][]the {pos} position_Of {field} not equal to {CommaSeparatedValues}=((new Contains()).positionOfFieldNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]RuleId {ruleID} any_occurance_of_the {field} in_section {section} is_equal_to_values {comaseparatedvalues}=(multiEquals(xcb,{ruleID},{section},{field},{comaseparatedvalues}))
[condition][]it is not true that_the minimum length of {field} is {value}=(!((new LengthCheck()).checkMinimumLength((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_virguleFollowedByVirgule {field}=(!((new Contains()).virguleFollowedByVirgule((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} has_only one {char} special character present=(!((new DatatypeCheck()).checkRepeationOFSpecialCharacter((xcb.xpath({field})).stringValue(),{char})))
[condition][]it is not true that_the interval between {fielddate1} and {fielddate2} is less than {days}=(!((new DateCheck()).intervalBetweenTwoDateIsLessThanDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days})))
[condition][]the {field} is less than time {value}=((new TimeFormatCheck()).fieldinformatlessthanvalue((xcb.xpath({field})).stringValue(),{value}))
[condition][]RuleId {ruleID} any_occurance_of_the {fieldwithxpath} in_section {section} does not exists=(moNotExists(xcb,{ruleID},{section},{fieldwithxpath}))
[condition][]it is not true that_the {field} only the first word is populated with the {values} with absent additional data=(!((new Contains()).containscommasepvaluesfollbyword((xcb.xpath({field})).stringValue(),{values})))
[condition][]RuleId {ruleID} in any {section} the {field1} equals{value1} and {field2} not_equals {value2} then {errorcode} with {errormsg}=(virtualfield1equalsval1field2notequalsval2({section},(xcb.xpath({field1})).stringValue(),{value1},(xcb.xpath({field2})).stringValue(),{value2},{errorcode},{errormsg}))
[condition][]the {field} is Numeric with Special Characters=((new DatatypeCheck()).checkNumericSP((xcb.xpath({field})).stringValue()))
[condition][]the {field} has_none valid values{commaseperatedvalues}=((new isValidValue()).isNoneValidValues((xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]it is not true that_display the message {field}=(!((new DisplayMessage()).displayMessage((xcb.xpath({field})).stringValue())))
[condition][]RuleId {ruleID} it is not true that_any occurence of the position{pos1} to {pos2} of the_field {field} in subsection {section} of section {section}is_equal_to_value {value}=(!(virtual_anyOccurenceOfPos1To2IsEqualtoValue({pos1},{pos2},(xcb.xpath({field})).stringValue(),{section},{section},{value})))
[condition][]the {field} contains {char} followed and preceeded by a numeric=(virtualCharacterPreceededOrFollowedByNumeric((xcb.xpath({field})).stringValue(),{char}))
[condition][]the {field} has_all lowercase characters for comma seperated values=((new CapitalLetterCheck()).isAllLowerCaseForCSV((xcb.xpath({field})).stringValue()))
[condition][]setRequestType {var0} =((new ReqTypeAct()).setRequestType({var0}))
[condition][]RuleId {ruleID} it is not true that_In the form {form} with section {section} having {subsection} if the {rtyfield} equals {valueLML} then {lact} is not_equals D or I=(!(virtualnoofoccurencesofrtyequalslmllactnotdandI({form},{section},{subsection},(xcb.xpath({rtyfield})).stringValue(),{valueLML},{lact})))
[condition][]it is not true that_the interval between {fielddate1} and {fielddate2} is less than or equal to {days}=(!((new DateCheck()).intervalBetweenTwoDateIsLessThanOrEqualtoDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days})))
[condition][]it is not true that_checkSupRequestExistsInDatabaseforVZE {var0} {var1} {var2} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkSupRequestExistsInDatabaseforVZE({var0},{var1},{var2}))
[condition][]RuleId {ruleID} it is not true that_any_occurance_of_the {field} in_section {section} is_equal_to_value {value}=(!(multiEquals(xcb,{ruleID},{section},{field},{value})))
[condition][]the {pos} and {pos} position_of the {field} is lesser than or equal to {pos} and {pos} position=((new Position()).twoPositionValueofTagIsLessThanOrEqualToTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][] new ReqTypeAct  getRequestType  =((new ReqTypeAct()).getRequestType())
[condition][]the_field value {fieldvalue} matches the pattern {pattern}=((new SpecialFormat()).isPatternMatches((xcb.xpath({fieldvalue})).stringValue(),{pattern}))
[condition][]the {pos} position_of {field} is not equal to {commaseperatedvalues}=((new Contains()).positionOfFieldNotEqualToValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]The {field} is less than time {value1} and greater than time {value2}=((new TimeFormatCheck()).timeRange((xcb.xpath({field})).stringValue(),{value1},{value2}))
[condition][]the {fielddate1} is equal to {fielddate2}=((new DateCheck()).isEqualTo((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]checkRequestExistsInDatabaseforVZE {var0} {var1} {var2} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseforVZE({var0},{var1},{var2}))
[condition][]RuleId {ruleID} the value of any occurance of {field1withxpzth} not_equals value of any occurence of {field2withxpath}=(valueofanyoccoffield1notequalsvalueofanyoccoffield2((xcb.xpath({field1withxpzth})).stringValue(),(xcb.xpath({field2withxpath})).stringValue()))
[condition][]it is not true that_virtualgetPreviousResponseXMLFromDB {PON} {ver} {ccna} {xmlInstance} =(!(virtualgetPreviousResponseXMLFromDB((xcb.xpath({PON})).stringValue(),{ver},{ccna},{xmlInstance})))
[condition][]it is not true that_the {field} is greater than {value}=(!((new Equals()).isGreaterThan((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_the last character Of {field} is {value}=(!(virtualLastCharacterOfField((xcb.xpath({field})).stringValue(),{value})))
[condition][]isValidDate2 {var0} =((new DateCheck()).isValidDate2({var0}))
[condition][]it is not true that_check Request Exists In Database{PON} {VER} and {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabase((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_any_occurance_of_the {fieldwithxpath} in_section {section} does not exists=(!(moNotExists(xcb,{ruleID},{section},{fieldwithxpath})))
[condition][]the position_of Numeric is {pos} in {field}=((new DatatypeCheck()).checkPositionNumeric({pos},(xcb.xpath({field})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_all occurance of the {field} is not Sequential=(!(allOccurenceValuesnotSequential((xcb.xpath({field})).stringValue())))
[condition][]the_field {fieldvalue} equals {value}=((new Equals()).isEquals((xcb.xpath({fieldvalue})).stringValue(),{value}))
[condition][]it is not true that_cancelOrdercheck{PON} {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkForCancelorder((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_the {SATH} and {STATE} has_abbreviation value=(!((new ThoroughFareHelper()).fetchAbbreviationName({SATH},{STATE})))
[condition][]the {pos} position_of {field} in between {startrange} and {endrange}=((new RangeOfValues()).fieldPositionInRange({pos},(xcb.xpath({field})).stringValue(),{startrange},{endrange}))
[condition][]check CCNA value Exists In Database {PON} {CCNA} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkCCNARequestExistsInDatabase((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_setRequestType {var0} =(!((new ReqTypeAct()).setRequestType({var0})))
[condition][]it is not true that_the character at the last pos of the {field} equals {values}=(!((new Position()).lastposoffieldequalsvalues((xcb.xpath({field})).stringValue(),{values})))
[condition][]it is not true that_the position_of Special Character is {pos} in {field}=(!((new DatatypeCheck()).checkPositionSP({pos},(xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {pos} of {field} has {value}=(!((new isValidValue()).positionOfFieldValidValue({pos},(xcb.xpath({field})).stringValue(),{value})))
[condition][]the {field} has {count} comma separated values=((new CommaSeparatedSpace()).countCommaSeperatedValues((xcb.xpath({field})).stringValue(),{count}))
[condition][]the {field} has_all uppercase characters for comma seperated values=((new CapitalLetterCheck()).isAllUpperCaseForCSV((xcb.xpath({field})).stringValue()))
[condition][]the {field1} is greater than values {field2}=((new Equals()).field1IsGreaterThanField2((xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue()))
[condition][]RuleId {ruleID} morethanoneOccurenceEqualToValues {var0} {var1} =(MorethanoneOccurenceEqualToValues({var0},{var1}))
[condition][]it is not true that_the {fielddate1} is equal to {fielddate2}=(!((new DateCheck()).isEqualTo((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]the interval between {fielddate1} and {fielddate2} is equal to {days}=((new DateCheck()).intervalBetweenTwoDateIsEqualtoDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days}))
[condition][]the interval between {fielddate1} and {fielddate2} is greater than or equal to {days}=((new DateCheck()).intervalBetweenTwoDateIsGreaterThanOrEqualToDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days}))
[condition][]it is not true that_the datefield {field1value} is greater than or equal to the datefield {field2value} by one year=(!((new DateCheck()).isField1GreaterThanOrEqualToField2ByOneYear((xcb.xpath({field1value})).stringValue(),(xcb.xpath({field2value})).stringValue())))
[condition][]the {field} is greater than time {value} in HHMMSS=((new TimeFormatCheck()).fieldinformatHHMMSSgreaterthanvalue((xcb.xpath({field})).stringValue(),{value}))
[condition][]compareCharAtAnyPositionWithAnyValue {var0} {var1} {var2} {var3} {var4} =((new Position()).compareCharAtAnyPositionWithAnyValue({var0},{var1},{var2},{var3},{var4}))
[condition][]it is not true that_the {pos} position_of {field} is in range {startvalue} and {endvalue}=(!((new Populated()).isPostionOfFieldPopulatedInRange({pos},(xcb.xpath({field})).stringValue(),{startvalue},{endvalue})))
[condition][]RuleId {ruleID} all occurence of the {field} not equal_to_value {value}=(allOccurenceOfFieldNotEqualToValue((xcb.xpath({field})).stringValue(),{value}))
[condition][]the range of the {field} is AA to ZZ=((new RangeOfValues()).rangeCheckAA_ZZ((xcb.xpath({field})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_number of occurance of the {field} is_equal_to_value {value}=(!(noOfOccurenceEqualTo((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_check For Duplicate Order Present In DB {PON} {CCNA} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkForDuplicateOrder((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]the {fielddate1} is todays date=((new DateCheck()).isToday((xcb.xpath({fielddate1})).stringValue()))
[condition][]RuleId {ruleID} the occurance of the {field} is atmost {value}=(atmostOccurenceOf((xcb.xpath({field})).stringValue(),{value}))
[condition][]RuleId {ruleID} no of occurences {xpath} is_not_equal_to_value {field}=(virtualnoOfOccurencesIsNotEqualToValue({xpath},(xcb.xpath({field})).stringValue()))
[condition][]the {field} contains {num} of consecutive uppercase Alpha Characters=((new CapitalLetterCheck()).containsConsecutiveUppercaseAlphaCharacters((xcb.xpath({field})).stringValue(),{num}))
[condition][]{field} has_space as a special character=((new SpaceCheck()).spaceAsSpecialCharacter((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the maximum length of {field} is {value}=(!((new LengthCheck()).checkMaximumlength((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_checkRequestExistsInDatabaseForREQTYP{PON} {CCNA} {REQTYP}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseForReqtyp((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue(),(xcb.xpath({REQTYP})).stringValue()))
[condition][]it is not true that_the {fieldwithxpath} is not required=(!((new Required()).isNotRequired((xcb.xpath({fieldwithxpath})).stringValue())))
[condition][]the position_of Special Character is {pos} in {field}=((new DatatypeCheck()).checkPositionSP({pos},(xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} has_time format as {timeformat}=(!((new TimeFormatCheck()).timeFormat((xcb.xpath({field})).stringValue(),{timeformat})))
[condition][]the difference between {fielddate1} and {fielddate2} is less than one year=((new DateCheck()).isRangeLesserThanOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]it is not true that_the {fieldvalue} not_equals {value}=(!((new Equals()).isNotEquals((xcb.xpath({fieldvalue})).stringValue(),{value})))
[condition][]it is not true that_the {fieldvalue} contains {value} character which is preceeded and followed by numeric=(!(virtualeachCharacterPreceededOrFollowedByNumeric((xcb.xpath({fieldvalue})).stringValue(),{value})))
[condition][]RuleId {ruleID} it is not true that_getvalue {var0} =(!(getvalue({var0})))
[condition][]RuleId {ruleID} occNoValue_inRange {var0} {var1} {var2} {var3} {var4} {var5} =(OccNoValue_inRange({var0},{var1},{var2},{var3},{var4},{var5}))
[condition][]it is not true that_the {pos} and {pos} position_of the {field} is equal to {pos} and {pos} position=(!((new Position()).twoPositionValueofTagEqualToValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]it is not true that_the {field} is AlphaNumeric=(!((new DatatypeCheck()).checkAlphaNumeric((xcb.xpath({field})).stringValue())))
[condition][]the_field1 {field1} and field2 {field2} Combination is_Invalid for the Valid_field1 values {values} and combination {kvcomb}=(virtual_keyValueCombination((xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue(),{values},{kvcomb}))
[condition][]it is not true that_the {fielddate1} is greater than or equal to {fielddate2}=(!((new DateCheck()).isGreaterThanOrEqualTo((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]checkSupRequestExistsInDatabaseforVZE {var0} {var1} {var2} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkSupRequestExistsInDatabaseforVZE({var0},{var1},{var2}))
[condition][]check For Duplicate Order Present In DB {PON} {CCNA} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkForDuplicateOrder((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_field1equalsval1field2notequalsval2 {var0} {var1} {var2} {var3} {var4} {var5} {var6} {var7} =(!(field1equalsval1field2notequalsval2({var0},{var1},{var2},{var3},{var4},{var5},{var6},{var7})))
[condition][]it is not true that_the {field} which has_a character {character} preceded or followed by a numeric=(!((new Contains()).characterPreceededOrFollowedByNumeric((xcb.xpath({field})).stringValue(),{character})))
[condition][]it is not true that_the {field} has_format NNNNNNA=(!((new SpecialFormat()).formatisNNNNNNA((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the_field {field} is populated=(!((new Populated()).isPopulated((xcb.xpath({field})).stringValue())))
[condition][]RuleId {ruleID} it is not true that_any_occurance_of_the {field} in_section {section} is_equal_to_values {comaseparatedvalues}=(!(multiEquals(xcb,{ruleID},{section},{field},{comaseparatedvalues})))
[condition][]RuleId {ruleID} it is not true that_in any {section} the {field1} {field2} then {errorcode} with {errormsg}=(!(virtuallvlcheck({section},(xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue(),{errorcode},{errormsg})))
[condition][]the {pos} and {pos} position_of the {field} is greater than {pos} and {pos} position=((new Position()).twoPositionValueofTagIsGreaterThanTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]the {field} has_a valid value {value}=((new isValidValue()).isValidValue((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that_For an order the CCNA {CCNA} REQTYP{REQTYP} and ACT {ACT} matches database values=((new SupplementOrderCheck(xcb.getXmlInstance())).ccnaValueCheck((xcb.xpath({CCNA})).stringValue(),(xcb.xpath({REQTYP})).stringValue(),(xcb.xpath({ACT})).stringValue()))
[condition][]the {field} contains all {CommaSeparatedValues}=((new Contains()).containsAll((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]RuleId {ruleID} it is not true that_occNoValue_inRange {var0} {var1} {var2} {var3} {var4} {var5} =(!(OccNoValue_inRange({var0},{var1},{var2},{var3},{var4},{var5})))
[condition][]it is not true that_the {field} is Required for {commaseperatedvalues}=(!((new Required()).requiredForValues((xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]the {fieldwithxpath} is not prohibited=((new Prohibited()).isNotProhibited((xcb.xpath({fieldwithxpath})).stringValue()))
[condition][]the {pos} and {pos} of {field} is equal to {CommaSeparatedValues}=((new Position()).twoPositionValueofTagEqualToValues({pos},{pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]it is not true that_the {field} contains only firstword populated with no additional data=(!((new Contains()).conatinsonlyfirstword((xcb.xpath({field})).stringValue())))
[condition][]the {field} not_equals {field}=((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the_field {field} is_not_equal_to_values {CommaSeparatedValues}=(!((new Equals()).isNotEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]display the message {field}=((new DisplayMessage()).displayMessage((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} is less than {value}=(!((new Equals()).isLessThan((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_the {pos} position_of field {field} is equal to {commaseperatedvalues}=(!((new Position()).positionOftagValueEqualToValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]the {field} has_time format as HHMMSS=((new TimeFormatCheck()).fieldinformatHHMMSS((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the_field value {fieldvalue} matches the pattern {pattern}=(!((new SpecialFormat()).isPatternMatches((xcb.xpath({fieldvalue})).stringValue(),{pattern})))
[condition][]it is not true that_the {pos} position_Of {field} not equal to {CommaSeparatedValues}=(!((new Contains()).positionOfFieldNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that_isRequired {var0} =(!((new Required()).isRequired({var0})))
[condition][]RuleId {ruleID} the {field} contains alphanumeric without {spset}=(checkAlphaNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{spset}))
[condition][]it is not true that_the range of the {field} is between {startrange} and {endrange}=(!((new RangeOfValues()).rangeCheckNN_NN((xcb.xpath({field})).stringValue(),{startrange},{endrange})))
[condition][]RuleId {ruleID} noOccurenceEqualToValue {var0} {var1} =(NoOccurenceEqualToValue({var0},{var1}))
[condition][]it is not true that_the {fielddate1} is a working day=(!((new DateCheck()).isWorkingDay((xcb.xpath({fielddate1})).stringValue())))
[condition][]the datefield {field1value} is greater than or equal to the datefield {field2value} by one year=((new DateCheck()).isField1GreaterThanOrEqualToField2ByOneYear((xcb.xpath({field1value})).stringValue(),(xcb.xpath({field2value})).stringValue()))
[condition][]virguleFollowedByVirgule {field}=((new Contains()).virguleFollowedByVirgule((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_setActivity {var0} =(!((new ReqTypeAct()).setActivity({var0})))
[condition][]RuleId {ruleID} it is not true that_the value of any occurance of {field1withxpzth} not_equals value of any occurence of {field2withxpath}=(!(valueofanyoccoffield1notequalsvalueofanyoccoffield2((xcb.xpath({field1withxpzth})).stringValue(),(xcb.xpath({field2withxpath})).stringValue())))
[condition][]the {pos} position_Of {field1} equal to {pos} position_Of {field2}=((new Contains()).positionOfFieldEqualToPositionOfField({pos},(xcb.xpath({field1})).stringValue(),{pos},(xcb.xpath({field2})).stringValue()))
[condition][]the interval between {fielddate1} and {fielddate2} is less than {days}=((new DateCheck()).intervalBetweenTwoDateIsLessThanDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days}))
[condition][]it is not true that_the {field} is equal or greater than {value}=(!((new Equals()).isEqualOrGreaterThan((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_the {fielddate1} is todays date=(!((new DateCheck()).isToday((xcb.xpath({fielddate1})).stringValue())))
[condition][]it is not true that_the {pos} position_of {field} in between {startrange} and {endrange}=(!((new RangeOfValues()).fieldPositionInRange({pos},(xcb.xpath({field})).stringValue(),{startrange},{endrange})))
[condition][]RuleId {ruleID} it is not true that_all occurence of the {field} not equal_to_value {value}=(!(allOccurenceOfFieldNotEqualToValue((xcb.xpath({field})).stringValue(),{value})))
[condition][]RuleId {ruleID} virtualnpqtyValueDoesNotMatchAllOccurencesOfportednbrValue {field} {xmlIns} =(virtualnpqtyValueDoesNotMatchAllOccurencesOfportednbrValue((xcb.xpath({field})).stringValue(),{xmlIns}))
[condition][]it is not true that_the {field} doesnot contain single or combination of the values {CommaSeparatedValues}=(!((new Contains()).fielddoesntcontaincombination((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that_the {pos} of {field} has {commaseperatedvalues}=(!((new isValidValue()).positionOfFieldValidValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]the interval between {fielddate1} and {fielddate2} is less than or equal to {days}=((new DateCheck()).intervalBetweenTwoDateIsLessThanOrEqualtoDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days}))
[condition][]it is not true that_the position {pos1} to position {pos2} of {field1value} is greater than position {pos3} to position {pos4} of {field2value} plus one=(!((new Position()).checkrangeoffield1greaterthanrangeoffield2plusone({pos1},{pos2},(xcb.xpath({field1value})).stringValue(),{pos3},{pos4},(xcb.xpath({field2value})).stringValue())))
[condition][]it is not true that_the_field {field} contains a space between position {pos1} and position {pos2}=(!((new SpaceCheck()).existenceOfSpaceInSpecRange((xcb.xpath({field})).stringValue(),{pos1},{pos2})))
[condition][]the {field} not_equals {value}=((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} contains only firstword populated with no additional data=((new Contains()).conatinsonlyfirstword((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} is Alpha with Special Characters Set {setofspecialcharacters}=(!((new DatatypeCheck()).checkAlphaSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters})))
[condition][]the {field} has_both uppercase and lowercase characters for comma seperated vaules=((new CapitalLetterCheck()).isUpperAndLowerCaseForCSV((xcb.xpath({field})).stringValue()))
[condition][]the {pos} position_of {field} is not equal to {field}=((new Position()).positionOftagValueNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue()))
[condition][]the minimum length of {field} is {value}=((new LengthCheck()).checkMinimumLength((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} contains roman numerals=((new Contains()).containsRoman((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} contains {num} of consecutive uppercase Alpha Characters=(!((new CapitalLetterCheck()).containsConsecutiveUppercaseAlphaCharacters((xcb.xpath({field})).stringValue(),{num})))
[condition][]the {pos} of {field} has {value}=((new isValidValue()).positionOfFieldValidValue({pos},(xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that_the_field {field} contains {CommaSeparatedValues}=(!((new Contains()).contains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that_the {pos} and {pos} position_of the {field} is not equal to {pos} and {pos} position=(!((new Position()).twoPositionValueofTagNotEqualToValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]it is not true that_the {field} is Numeric with Special Characters=(!((new DatatypeCheck()).checkNumericSP((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {pos} and {pos} position_of the {field} is lesser than {pos} and {pos} position=(!((new Position()).twoPositionValueofTagIsLessThanTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos})))
[condition][]the character at the last pos of the {field} equals {values}=((new Position()).lastposoffieldequalsvalues((xcb.xpath({field})).stringValue(),{values}))
[condition][]the_section {field} is_not_populated=((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} has_format as {format}=(!((new SpecialFormat()).formatIs((xcb.xpath({field})).stringValue(),{format})))
[condition][]the {fieldvalue} contains virgule which is preceeded and followed by numeric=((new Contains()).virguleprecededandfollowedbynumeric((xcb.xpath({fieldvalue})).stringValue()))
[condition][]the {field} has_valid values {commaseperatedvalues}=((new isValidValue()).isValidValues((xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]it is not true that_the interval between {fielddate1} and {fielddate2} is equal to {days}=(!((new DateCheck()).intervalBetweenTwoDateIsEqualtoDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days})))
[condition][]it is not true that_the difference between {fielddate1} and {fielddate2} is greater than or equal to one year=(!((new DateCheck()).isRangeGreaterThanOrEqualToOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]it is not true that_the {pos} position_of_field {field} equals {value}=(!((new Position()).positionOftagValueEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value})))
[condition][]the last character Of {field} is {value}=(virtualLastCharacterOfField((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} has_time format as {timeformat}=((new TimeFormatCheck()).timeFormat((xcb.xpath({field})).stringValue(),{timeformat}))
[condition][]it is not true that_the difference between {fielddate1} and {fielddate2} is not equal to one year=(!((new DateCheck()).isRangeNotEqualToOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]the {field} contains {num} of consecutive lowercase Alpha Characters=((new CapitalLetterCheck()).containsConsecutiveLowercaseAlphaCharacters((xcb.xpath({field})).stringValue(),{num}))
[condition][]RuleId {ruleID} it is not true that_In any {section} the {field1} {field2}=(!(virtuallvlCheck({section},(xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue())))
[condition][]it is not true that_the {field} is greater than time {value}=(!((new TimeFormatCheck()).fieldinformatgreaterthanvalue((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_the {fieldwithxpath} is not prohibited=(!((new Prohibited()).isNotProhibited((xcb.xpath({fieldwithxpath})).stringValue())))
[condition][]RuleId {ruleID} field1equalsval1field2notequalsval2 {var0} {var1} {var2} {var3} {var4} {var5} {var6} {var7} =(field1equalsval1field2notequalsval2({var0},{var1},{var2},{var3},{var4},{var5},{var6},{var7}))
[condition][]RuleId {ruleID} noOfOccurenceGreaterThan {var0} {var1} =(noOfOccurenceGreaterThan({var0},{var1}))
[condition][]the {field} is Alpha without Special Characters Set {setofspecialcharacters}=((new DatatypeCheck()).checkAlphaWithOutSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters}))
[condition][]For an order the CCNA {CCNA} REQTYP{REQTYP} and ACT {ACT} matches database values=((new SupplementOrderCheck(xcb.getXmlInstance())).ccnaValueCheck((xcb.xpath({CCNA})).stringValue(),(xcb.xpath({REQTYP})).stringValue(),(xcb.xpath({ACT})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_any section {fieldwithxpath} of {field} does not exists=(!(virtualAnyOccurencedoesnotExistsForSection((xcb.xpath({fieldwithxpath})).stringValue(),(xcb.xpath({field})).stringValue())))
[condition][]the_field {field} does not contain {CommaSeparatedValues}=((new Contains()).doesNotContains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]it is not true that_the {field} contains all {CommaSeparatedValues}=(!((new Contains()).containsAll((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]the {field} is AlphaNumeric with following Special Character set {setofspecialcharacters}=((new DatatypeCheck()).checkAlphaNumericSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters}))
[condition][]the {fielddate1} is greater than or equal to {fielddate2}=((new DateCheck()).isGreaterThanOrEqualTo((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]it is not true that_the {fieldvalue} contains virgule which is preceeded or followed by numeric=(!((new Contains()).virguleprecededorfollowedbynumeric((xcb.xpath({fieldvalue})).stringValue())))
[condition][]it is not true that_the {pos} position_of {field} equal to {value} =(!((new Contains()).positionOfFieldEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value})))
[condition][]the {pos} position_of {field} is not equal to {value}=((new Contains()).positionOfFieldNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value}))
[condition][]the {pos} position_of {field} equal_to_values {CommaSeparatedValues}=((new Contains()).positionOfFieldEqualToValues({pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the {fielddate1} is greater than {fielddate2}=((new DateCheck()).isGreaterThan((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]the {fielddate1} is less than or equal to {fielddate2}=((new DateCheck()).isLessThanOrEqualTo((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]the {pos} and {pos} position_of the {field} is equal to {pos} and {pos} position=((new Position()).twoPositionValueofTagEqualToValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]the {field} has_comma seperated values=((new CommaSeparatedSpace()).checkCommaSeparatedSpace((xcb.xpath({field})).stringValue()))
[condition][]the {field} has_a invalid value {value}=((new isValidValue()).isNotValidValue((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that_the {field} is Alpha with Special Characters=(!((new DatatypeCheck()).checkAlphaSP((xcb.xpath({field})).stringValue())))
[condition][]the {field} position {pos} and {pos} is greater than or equal to {pos} and {pos}=((new Contains()).checkPositionalValuesGreaterThanOrEqualTo((xcb.xpath({field})).stringValue(),{pos},{pos},{pos},{pos}))
[condition][]it is not true that_checkRequestExistsInDatabaseForREQTYP {PON} {CCNA} {REQTYP}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseForReqtyp((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue(),(xcb.xpath({REQTYP})).stringValue()))
[condition][]it is not true that_the {pos} and {pos} of {field} is equal to {CommaSeparatedValues}=(!((new Position()).twoPositionValueofTagEqualToValues({pos},{pos},(xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]the position {pos1} to position {pos2} of {field1value} is greater than position {pos3} to position {pos4} of {field2value} plus one=((new Position()).checkrangeoffield1greaterthanrangeoffield2plusone({pos1},{pos2},(xcb.xpath({field1value})).stringValue(),{pos3},{pos4},(xcb.xpath({field2value})).stringValue()))
[condition][]the_length_of field {field} is {value}=((new LengthCheck()).checkLength((xcb.xpath({field})).stringValue(),{value}))
[condition][]RuleId {ruleID} it is not true that_positionOfAnyFieldEqualToCharacter {var0} {var1} {var2} =(!(positionOfAnyFieldEqualToCharacter({var0},{var1},{var2})))
[condition][]the {field} which has_a character {character} preceded or followed by a numeric=((new Contains()).characterPreceededOrFollowedByNumeric((xcb.xpath({field})).stringValue(),{character}))
[condition][]the {field} is Alpha with Special Characters Set {setofspecialcharacters}=((new DatatypeCheck()).checkAlphaSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters}))
[condition][]the position {pos} of the_field {field} is lower case alpha=((new DatatypeCheck()).checkPositionLowerCaseAlpha({pos},(xcb.xpath({field})).stringValue()))
[condition][]RuleId {ruleID} any occurence of {fieldwithxpath} not_equal_to_values {values} or not populated=(anyOccurenceNotEqualToValuesornotpopulated((xcb.xpath({fieldwithxpath})).stringValue(),{values}))
[condition][]it is not true that_the {fieldvalue} contains virgule which is preceeded and followed by numeric=(!((new Contains()).virguleprecededandfollowedbynumeric((xcb.xpath({fieldvalue})).stringValue())))
[condition][]RuleId {ruleID} more than one occurence of the {pathfield} is_equal_to_values {values}=(morethanoneOccurenceEqualToValues((xcb.xpath({pathfield})).stringValue(),{values}))
[condition][]it is not true that_the {field} has_all lowercase characters=(!((new CapitalLetterCheck()).isAllLowerCase((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} not_equals {field}=(!((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue())))
[condition][]the {field} is equal to comma seperated values {CommaSeparatedValues}=((new Equals()).isEqualToCommaSeperatedValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]the {field} is less than {value}=((new Equals()).isLessThan((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {pos} position_of field {field} is equal to {commaseperatedvalues}=((new Position()).positionOftagValueEqualToValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]lastCharacterOfField {var0} {var1} =((new Equals()).lastCharacterOfField({var0},{var1}))
[condition][]it is not true that_the {field} does not contain {CommaSeparatedValues}=(!((new Contains()).doesNotContains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that_the {field} is AlphaNumeric with Special Characters=(!((new DatatypeCheck()).checkAlphaNumericSP((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} is Alpha without Special Characters Set {setofspecialcharacters}=(!((new DatatypeCheck()).checkAlphaWithOutSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters})))
[condition][]it is not true that_check Request Exists In Database {PON} {VER} and {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabase((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_compareCharAtAnyPositionWithAnyValue {var0} {var1} {var2} {var3} {var4} =(!((new Position()).compareCharAtAnyPositionWithAnyValue({var0},{var1},{var2},{var3},{var4})))
[condition][]it is not true that_isValidDate2 {var0} =(!((new DateCheck()).isValidDate2({var0})))
[condition][]it is not true that_the {field} has_date format as {format}=(!((new DateFormatCheck()).dateCheck((xcb.xpath({field})).stringValue(),{format})))
[condition][]the {field} has {commaseperatedvalues}=((new ValidValueCheck()).validCommaSeperatedValue((xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]it is not true that_twoPositionRangeValueofTagEqualToValueOfAnotherTwoPosition {var0} {var1} {var2} {var3} {var4} {var5} =(!((new Position()).twoPositionRangeValueofTagEqualToValueOfAnotherTwoPosition({var0},{var1},{var2},{var3},{var4},{var5})))
[condition][]it is not true that_the {field} is not Required=(!((new Required()).isNotRequired((xcb.xpath({field})).stringValue())))
[condition][]RuleId {ruleID} in any {section} the {field1} {field2} then {errorcode} with {errormsg}=(virtuallvlcheck({section},(xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue(),{errorcode},{errormsg}))
[condition][]the {field} is less than time {value} in HHMMSS=((new TimeFormatCheck()).fieldinformatHHMMSSlessthanvalue((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that_the_field {field} does not contain {CommaSeparatedValues}=(!((new Contains()).doesNotContains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]checkForOrderCompletion{PON} {VER} AND {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkordercompletion((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_the {field} contains {CommaSeparatedValues}=(!((new Contains()).contains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]it is not true that_check Sup Request Exists In Database for {PON} {VER} and {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkSupRequestExistsInDatabase((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]the {field} equals {value}=((new Equals()).isEquals((xcb.xpath({field})).stringValue(),{value}))
[condition][]the_field {field} contains a space between position {pos1} and position {pos2}=((new SpaceCheck()).existenceOfSpaceInSpecRange((xcb.xpath({field})).stringValue(),{pos1},{pos2}))
[condition][]it is not true that_the {field} position {pos} and {pos} is greater than or equal to {pos} and {pos}=(!((new Contains()).checkPositionalValuesGreaterThanOrEqualTo((xcb.xpath({field})).stringValue(),{pos},{pos},{pos},{pos})))
[condition][]twoPositionRangeValueofTagEqualToValueOfAnotherTwoPosition {var0} {var1} {var2} {var3} {var4} {var5} =((new Position()).twoPositionRangeValueofTagEqualToValueOfAnotherTwoPosition({var0},{var1},{var2},{var3},{var4},{var5}))
[condition][]the {field} contains numeric values followed by lowercase Alpha Characters=((new CapitalLetterCheck()).fieldContainsNumericValuesFollowedByLowercaseAlphaCharacters((xcb.xpath({field})).stringValue()))
[condition][]the {pos} position_of_field {field} is not equal to {field}=((new Position()).positionOftagValueNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue()))
[condition][]RuleId {ruleID} it is not true that_atleastOccurenceOfTagPopulated {var0} {var1} =(!(atleastOccurenceOfTagPopulated({var0},{var1})))
[condition][]it is not true that_the {field} is_not_equal_to_values {values}=(!((new Equals()).isNotEqualToValues((xcb.xpath({field})).stringValue(),{values})))
[condition][]RuleId {ruleID} it is not true that_in any {section} the {field1} equals{value1} and {field2} not_equals {value2} then {errorcode} with {errormsg}=(!(virtualfield1equalsval1field2notequalsval2({section},(xcb.xpath({field1})).stringValue(),{value1},(xcb.xpath({field2})).stringValue(),{value2},{errorcode},{errormsg})))
[condition][]the {pos} position_of {field1} is equal to {pos} position_of {field2}=((new Position()).positionOfOneFieldIsEqualToPositionOfAnother({pos},(xcb.xpath({field1})).stringValue(),{pos},(xcb.xpath({field2})).stringValue()))
[condition][]it is not true that_the {field} has_none valid values {commaseperatedvalues}=(!((new isValidValue()).isNoneValidValues((xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]it is not true that_check Request ExistsInDatabaseWitoutVerCheck {PON} {VER} {CCNA} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseWithoutVerCheck((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_the {field} is AlphaNumeric with only space as special character=(!((new DatatypeCheck()).checkAlphaNumericWithSpaceAsSpecialCharacter((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_check CCNA value Exists In Database {PON} {CCNA} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkCCNARequestExistsInDatabase((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]the {field} is greater than {value}=((new Equals()).isGreaterThan((xcb.xpath({field})).stringValue(),{value}))
[condition][]the {field} is Required=((new Required()).isRequired((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} contains {num} of spaces before Alpha Characters=(!((new CapitalLetterCheck()).containsConsecutiveSpacesBeforeAlphaCharacters((xcb.xpath({field})).stringValue(),{num})))
[condition][]it is not true that_the {field} not_equals {value}=(!((new Equals()).isNotEquals((xcb.xpath({field})).stringValue(),{value})))
[condition][]checkRequestExistsInDatabaseForREQTYP {PON} {CCNA} {REQTYP}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseForReqtyp((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue(),(xcb.xpath({REQTYP})).stringValue()))
[condition][]it is not true that_the {field1} is greater than values {field2}=(!((new Equals()).field1IsGreaterThanField2((xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue())))
[condition][]RuleId {ruleID} it is not true that_anyCharacterExcept {var0} {var1} {var2} {var3} {var4} =(!(anyCharacterExcept({var0},{var1},{var2},{var3},{var4})))
[condition][]RuleId {ruleID} the number {value} occurance of the {field} is_equal_to_value {value}=(OccurencenoequalstoValue({value},(xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that   new ReqTypeAct  getActivity  =(!((new ReqTypeAct()).getActivity()))
[condition][]it is not true that_the difference between {fielddate1} and {fielddate2} is equal to one year=(!((new DateCheck()).isRangeEqualToOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]it is not true that_the {field} is less than time {value}=(!((new TimeFormatCheck()).fieldinformatlessthanvalue((xcb.xpath({field})).stringValue(),{value})))
[condition][]RuleId {ruleID} it is not true that_the number {value} occurance of the {field} is_equal_to_value {value}=(!(OccurencenoequalstoValue({value},(xcb.xpath({field})).stringValue(),{value})))
[condition][]the {fieldwithxpath} is not required=((new Required()).isNotRequired((xcb.xpath({fieldwithxpath})).stringValue()))
[condition][]check Request ExistsInDatabaseWitoutVerCheck {PON} {VER} {CCNA} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseWithoutVerCheck((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_the {field} is populated=(!((new Populated()).isPopulated((xcb.xpath({field})).stringValue())))
[condition][]the {field} is AlphaNumeric with only space as special character=((new DatatypeCheck()).checkAlphaNumericWithSpaceAsSpecialCharacter((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the {field} is greater than time {value} in HHMMSS=(!((new TimeFormatCheck()).fieldinformatHHMMSSgreaterthanvalue((xcb.xpath({field})).stringValue(),{value})))
[condition][]it is not true that_the_field {field} contains embedded space=(!((new SpaceCheck()).containsEmbeddedSpace((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the difference between {fielddate1} and {fielddate2} is greater than one year=(!((new DateCheck()).isRangeGreaterThanOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]the {field} has_none valid values {commaseperatedvalues}=((new isValidValue()).isNoneValidValues((xcb.xpath({field})).stringValue(),{commaseperatedvalues}))
[condition][]it is not true that_the {fielddate1} is a valid date=(!((new DateCheck()).isValidDate((xcb.xpath({fielddate1})).stringValue())))
[condition][]it is not true that_the position_of Alpha is {pos} in {field}=(!((new DatatypeCheck()).checkPositionAlpha({pos},(xcb.xpath({field})).stringValue())))
[condition][]the {field} is Alpha=((new DatatypeCheck()).checkAlpha((xcb.xpath({field})).stringValue()))
[condition][]checkRequestExistsInDatabaseForAct {PON} {CCNA} {ACT}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseForAct((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue(),(xcb.xpath({ACT})).stringValue()))
[condition][]it is not true that_the {pos} position_of {field} is not equal to {commaseperatedvalues}=(!((new Contains()).positionOfFieldNotEqualToValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]the difference between {fielddate1} and {fielddate2} is not equal to one year=((new DateCheck()).isRangeNotEqualToOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[consequence][]setRequestType {var0} =((new ReqTypeAct()).setRequestType({var0}))
[condition][]it is not true that_the_field is {field} not populated=(!((new Populated()).isNotPopulated((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the_length_of field {field} is {value}=(!((new LengthCheck()).checkLength((xcb.xpath({field})).stringValue(),{value})))
[condition][]isRequired {var0} =((new Required()).isRequired({var0}))
[condition][]RuleId {ruleID} it is not true that_any_occurance_of_the {field} in_section {section} is_not_equal_to_values {comaseparatedvalues}=(!(multiNotEquals(xcb,{ruleID},{section},{field},{comaseparatedvalues})))
[condition][]it is not true that_the_length_of field {field} is between {min} and {max}=(!((new LengthCheck()).checkMinMaxLength((xcb.xpath({field})).stringValue(),{min},{max})))
[condition][]the {pos} and {pos} position_of the {field} is lesser than {pos} and {pos} position=((new Position()).twoPositionValueofTagIsLessThanTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]RuleId {ruleID} occnooffieldpopulated {var0} {var1} =(occnooffieldpopulated({var0},{var1}))
[condition][]it is not true that_the {pos} position_of {field} is not equal to {field}=(!((new Position()).positionOftagValueNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue())))
[condition][]RuleId {ruleID} it is not true that_tagValueOfOneFieldEqualToNoOfOccurenceOfAnotherField {var0} {var1} =(!(tagValueOfOneFieldEqualToNoOfOccurenceOfAnotherField({var0},{var1})))
[condition][]RuleId {ruleID} getvalue {var0} =(getvalue({var0}))
[condition][]it is not true that_the_field {fieldvalue} equals {value}=(!((new Equals()).isEquals((xcb.xpath({fieldvalue})).stringValue(),{value})))
[condition][]it is not true that_isCurrentDateLessThanOrEqualToDesiredDueDate {var0} =(!((new DateCheck()).isCurrentDateLessThanOrEqualToDesiredDueDate({var0})))
[condition][]cancelOrdercheck {PON} {CCNA} =((new SupplementOrderCheck(xcb.getXmlInstance())).checkForCancelorder((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_the {field} contains {char} followed and preceeded by a numeric=(!(virtualCharacterPreceededOrFollowedByNumeric((xcb.xpath({field})).stringValue(),{char})))
[condition][]the {field} has_format as {format}=((new SpecialFormat()).formatIs((xcb.xpath({field})).stringValue(),{format}))
[condition][]it is not true that   new ReqTypeAct  getRequestType  =(!((new ReqTypeAct()).getRequestType()))
[condition][]RuleId {ruleID} any_occurance_of_the {field} in_section {section} is_not_equal_to_value {value}=(multiNotEquals(xcb,{ruleID},{section},{field},{value}))
[condition][]it is not true that_checkRequestExistsInDatabaseForAct{PON} {CCNA} {ACT}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabaseForAct((xcb.xpath({PON})).stringValue(),(xcb.xpath({CCNA})).stringValue(),(xcb.xpath({ACT})).stringValue()))
[condition][]the {fielddate1} is not equal to {fielddate2}=((new DateCheck()).isNotEqualTo((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]it is not true that_the_field1 {field1} and field2 {field2} Combination is_Invalid for the Valid_field1 values {values} and combination {kvcomb}=(!(virtual_keyValueCombination((xcb.xpath({field1})).stringValue(),(xcb.xpath({field2})).stringValue(),{values},{kvcomb})))
[condition][]it is not true that_{field} has_space as a special character=(!((new SpaceCheck()).spaceAsSpecialCharacter((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the range of the {field} is A0 to Z9=(!((new RangeOfValues()).rangeCheckA0_Z9((xcb.xpath({field})).stringValue())))
[condition][]check Request Exists In Database {PON} {VER} and {CCNA}=((new SupplementOrderCheck(xcb.getXmlInstance())).checkRequestExistsInDatabase((xcb.xpath({PON})).stringValue(),(xcb.xpath({VER})).stringValue(),(xcb.xpath({CCNA})).stringValue()))
[condition][]it is not true that_the {field} has_both uppercase and lowercase characters=(!((new CapitalLetterCheck()).isUpperAndLowerCase((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} is Alpha=(!((new DatatypeCheck()).checkAlpha((xcb.xpath({field})).stringValue())))
[condition][]the {fieldvalue} contains {value} character which is preceeded and followed by numeric=(virtualeachCharacterPreceededOrFollowedByNumeric((xcb.xpath({fieldvalue})).stringValue(),{value}))
[condition][]RuleId {ruleID} it is not true that_any_occurance_of_the {field} in_section {section} is_not_equal_to_value {value}=(!(multiNotEquals(xcb,{ruleID},{section},{field},{value})))
[condition][]RuleId {ruleID} the value of any occurance of {field1withxpath} equals value of any occurence of {field2withxpath}=(valueofanyoccoffield1equalsvalueofanyoccoffield2((xcb.xpath({field1withxpath})).stringValue(),(xcb.xpath({field2withxpath})).stringValue()))
[condition][]it is not true that_the {field} has {commaseperatedvalues}=(!((new ValidValueCheck()).validCommaSeperatedValue((xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]it is not true that_the position {pos} of the_field {field} is lower case alpha=(!((new DatatypeCheck()).checkPositionLowerCaseAlpha({pos},(xcb.xpath({field})).stringValue())))
[condition][]RuleId {ruleID} it is not true that_no of occurences {xpath} is_not_equal_to_value {field}=(!(virtualnoOfOccurencesIsNotEqualToValue({xpath},(xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {pos} position_of_field {field} is_not_equal_to_values {commaseperatedvalues}=(!((new Position()).positionOftagValueNotEqualToValues({pos},(xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]it is not true that_the {field} has_none valid values{commaseperatedvalues}=(!((new isValidValue()).isNoneValidValues((xcb.xpath({field})).stringValue(),{commaseperatedvalues})))
[condition][]the {field} is not Required=((new Required()).isNotRequired((xcb.xpath({field})).stringValue()))
[condition][]the difference between {fielddate1} and {fielddate2} is equal to one year=((new DateCheck()).isRangeEqualToOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue()))
[condition][]the {field} is greater than time {value}=((new TimeFormatCheck()).fieldinformatgreaterthanvalue((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that_posoffieldequalsspace {var0} {var1} =(!((new SpaceCheck()).posoffieldequalsspace({var0},{var1})))
[condition][]it is not true that_the {fieldwithxpath} is required=(!((new Required()).isRequired((xcb.xpath({fieldwithxpath})).stringValue())))
[condition][]RuleId {ruleID} it is not true that_the occurance of the {field} is atmost {value}=(!(atmostOccurenceOf((xcb.xpath({field})).stringValue(),{value})))
[condition][]dateCheck1 {var0} {var1} =((new DateFormatCheck()).dateCheck1({var0},{var1}))
[condition][]RuleId {ruleID} it is not true that_anyOccurenceOf {var0} =(!(anyOccurenceOf({var0})))
[condition][]it is not true that_the {field} has_all Uppercase characters=(!((new CapitalLetterCheck()).isAllUpperCase((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} is equal or less than {value}=(!((new Equals()).isEqualOrLessThan((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {pos} and {pos} position_of the {field} is greater than or equal to {pos} and {pos} position=((new Position()).twoPositionValueofTagIsGreaterThanOrEqualToTheValueOfAnotherTwoPosition({pos},{pos},(xcb.xpath({field})).stringValue(),{pos},{pos}))
[condition][]it is not true that_the {pos} position_of {field} is not equal to {value}=(!((new Contains()).positionOfFieldNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value})))
[condition][]RuleId {ruleID} it is not true that_validvalueisrepeated {var0} =(!(validvalueisrepeated({var0})))
[condition][]the {field} contains {num} of consecutive spaces after Alpha Characters=((new CapitalLetterCheck()).containsConsecutiveSpacesAfterAlphaCharacters((xcb.xpath({field})).stringValue(),{num}))
[condition][]the {pos} position_of_field {field} equals {value}=((new Position()).positionOftagValueEqualToValue({pos},(xcb.xpath({field})).stringValue(),{value}))
[condition][]RuleId {ruleID} tagValueOfOneFieldEqualToNoOfOccurenceOfAnotherField {var0} {var1} =(tagValueOfOneFieldEqualToNoOfOccurenceOfAnotherField({var0},{var1}))
[condition][]it is not true that_the {field} is equal to comma seperated values {CommaSeparatedValues}=(!((new Equals()).isEqualToCommaSeperatedValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]the {fieldwithxpath} is prohibited=((new Prohibited()).isProhibited((xcb.xpath({fieldwithxpath})).stringValue()))
[condition][]RuleId {ruleID} any_occurance_of_the {field} in_section {section} is_not_equal_to_values {comaseparatedvalues}=(multiNotEquals(xcb,{ruleID},{section},{field},{comaseparatedvalues}))
[condition][]the {field} is Numeric without Special Characters Set {setofspecialcharacters}=((new DatatypeCheck()).checkNumericWithOutSPSet((xcb.xpath({field})).stringValue(),{setofspecialcharacters}))
[condition][]the {field} only the first word is populated with the {values} with absent additional data=((new Contains()).containscommasepvaluesfollbyword((xcb.xpath({field})).stringValue(),{values}))
[condition][]RuleId {ruleID} it is not true that_morethanoneOccurenceEqualToValues {var0} {var1} =(!(MorethanoneOccurenceEqualToValues({var0},{var1})))
[condition][]it is not true that_the {field} has_a valid value {value}=(!((new isValidValue()).isValidValue((xcb.xpath({field})).stringValue(),{value})))
[condition][]the {field} contains {CommaSeparatedValues}=((new Contains()).contains((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[condition][]it is not true that_virtualcompareCurrentTagValueWithPreviousOrder {pon} {ver} {ccna} {xmlinstance} {ncvalue} {ncivalue} =(!(virtualcompareCurrentTagValueWithPreviousOrder({pon},{ver},{ccna},{xmlinstance},{ncvalue},{ncivalue})))
[condition][]isValidDate1 {var0} =((new DateCheck()).isValidDate1({var0}))
[condition][]it is not true that_the {field} has {count} comma separated values=(!((new CommaSeparatedSpace()).countCommaSeperatedValues((xcb.xpath({field})).stringValue(),{count})))
[condition][]it is not true that_the {field} is_not_equal_to_values {CommaSeparatedValues}=(!((new Equals()).isNotEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues})))
[condition][]RuleId {ruleID} number of occurance of the {field} is_equal_to_value {value}=(noOfOccurenceEqualTo((xcb.xpath({field})).stringValue(),{value}))
[condition][]it is not true that_the {pos} position_of_field {field} is not equal to {field}=(!((new Position()).positionOftagValueNotEqualToValue({pos},(xcb.xpath({field})).stringValue(),(xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} contains numeric characters=(!((new Contains()).containsNumeric((xcb.xpath({field})).stringValue())))
[consequence][]setActivity {var0} =((new ReqTypeAct()).setActivity({var0}))
[condition][]virtualcompareCurrentTagValueWithPreviousOrder {pon} {ver} {ccna} {xmlinstance} {ncvalue} {ncivalue} =(virtualcompareCurrentTagValueWithPreviousOrder({pon},{ver},{ccna},{xmlinstance},{ncvalue},{ncivalue}))
[condition][]the {field} has_all lowercase characters=((new CapitalLetterCheck()).isAllLowerCase((xcb.xpath({field})).stringValue()))
[condition][]it is not true that_the interval between {fielddate1} and {fielddate2} is not equal to {days}=(!((new DateCheck()).intervalBetweenTwoDateIsNotEqualtoDays((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue(),{days})))
[condition][]it is not true that_the difference between {fielddate1} and {fielddate2} is less than or equal to one year=(!((new DateCheck()).isRangeLesserThanOrEqualToOneYear((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]it is not true that_the {field} has_time format as HHMMSS=(!((new TimeFormatCheck()).fieldinformatHHMMSS((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {field} is Required=(!((new Required()).isRequired((xcb.xpath({field})).stringValue())))
[condition][]it is not true that_the {fielddate1} is greater than {fielddate2}=(!((new DateCheck()).isGreaterThan((xcb.xpath({fielddate1})).stringValue(),(xcb.xpath({fielddate2})).stringValue())))
[condition][]the_field {field} is_not_equal_to_values {CommaSeparatedValues}=((new Equals()).isNotEqualToValues((xcb.xpath({field})).stringValue(),{CommaSeparatedValues}))
[consequence][]the error code {field1} the error message {field2} for the field {field3}=(xcb.logError({field1},{field2},{field3}))
[consequence][]the error code {field1} the error message {field2}=(xcb.logError({field1},{field2}))
[condition][]the {section} {field} is not unique in all the occurences with errorCode {errorcode} and errorMessage {errormessage}=FieldShouldNotUnique(xcb,{section},{field},{errorcode},{errormessage})
[condition][]xcb object=xcb : XOMContainerBean()
[condition][]Evaluate=eval
[condition][]Start Brace=(
[condition][]End Brace=)
[condition][]AND=&&
[condition][]OR=||
